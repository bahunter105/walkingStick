<h1> Navigate to: <%= @landmark.title %> </h1>

<div>
  <audio src="<%=cloudinary_url(@landmark.prearrival_audio.key, :resource_type=>"video")%>" controls></audio>
</div>

<p>
  <%=link_to walk_landmark_path(@walk, @landmark) do%>
    I've Arrived at: <%= @landmark.title %>
  <% end %>
</p>
<%=@map_api_url%>
<%= ENV['MAPBOX_API_KEY'] %>

<div id="map"
     style="width: 100%; height: 600px;"
     data-markers="<%= @markers.to_json %>"
     data-need-user-marker="true"
     data-mapbox-api-key="<%= ENV['MAPBOX_API_KEY'] %>">
</div>


<%#
<div id='map'></div>
    <script>
    // add the JavaScript here
      mapboxgl.accessToken = 'pk.eyJ1IjoiYmFodW50ZXIiLCJhIjoiY2t2Y2Rtb2F3M3I3bTMxbHAycmlidG81ZCJ9.t60OT5ZAA1j7pjgP8rVRxQ';
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [-122.662323, 45.523751], // starting position
        zoom: 12
      });
      // set the bounds of the map
      const bounds = [
        [-123.069003, 45.395273],
        [-122.303707, 45.612333]
      ];
      map.setMaxBounds(bounds);

      // an arbitrary start will always be the same
      // only the end or destination will change
      const start = [-122.662323, 45.523751];

      // this is where the code for the next step will go
      // create a function to make a directions request
      async function getRoute(end) {
        // make a directions request using cycling profile
        // an arbitrary start will always be the same
        // only the end or destination will change
        const query = await fetch(
          `https://api.mapbox.com/directions/v5/mapbox/walking/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`,
          { method: 'GET' }
        );
        const json = await query.json();
        const data = json.routes[0];
        const route = data.geometry.coordinates;
        const geojson = {
          type: 'Feature',
          properties: {},
          geometry: {
            type: 'LineString',
            coordinates: route
          }
        };
        // if the route already exists on the map, we'll reset it using setData
        if (map.getSource('route')) {
          map.getSource('route').setData(geojson);
        }
        // otherwise, we'll make a new request
        else {
          map.addLayer({
            id: 'route',
            type: 'line',
            source: {
              type: 'geojson',
              data: geojson
            },
            layout: {
              'line-join': 'round',
              'line-cap': 'round'
            },
            paint: {
              'line-color': '#3887be',
              'line-width': 5,
              'line-opacity': 0.75
            }
          });
        }
        // add turn instructions here at the end
      }

      map.on('load', () => {
        // make an initial directions request that
        // starts and ends at the same location
        getRoute(start);

        // Add starting point to the map
        map.addLayer({
          id: 'point',
          type: 'circle',
          source: {
            type: 'geojson',
            data: {
              type: 'FeatureCollection',
              features: [
                {
                  type: 'Feature',
                  properties: {},
                  geometry: {
                    type: 'Point',
                    coordinates: start
                  }
                }
              ]
            }
          },
          paint: {
            'circle-radius': 10,
            'circle-color': '#3887be'
          }
        });
        // this is where the code from the next step will go
        map.on('click', (event) => {
  const coords = Object.keys(event.lngLat).map((key) => event.lngLat[key]);
  const end = {
    type: 'FeatureCollection',
    features: [
      {
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'Point',
          coordinates: coords
        }
      }
    ]
  };
  if (map.getLayer('end')) {
    map.getSource('end').setData(end);
  } else {
    map.addLayer({
      id: 'end',
      type: 'circle',
      source: {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'Point',
                coordinates: coords
              }
            }
          ]
        }
      },
      paint: {
        'circle-radius': 10,
        'circle-color': '#f30'
      }
    });
  }
  getRoute(coords);
});

      });
    </script> %>

<p>
  <%=link_to walk_path(@walk) do%>
    Take me back to walk page
  <% end %>
</p>
